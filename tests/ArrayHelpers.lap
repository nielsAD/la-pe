{$assertions on}

// This test is more about checking methods are generated correctly rather than actual core methods

var a: TIntegerArray;
begin
  a := [1,2,3,4,5];
  Assert(a.Low = Low(a));
  Assert(a.High = High(a));
  Assert(a.Length = Length(a));
  Assert(a.First = a[0]);
  Assert(a.Last = a[High(a)]);
  Assert(a.Equals(a.Copy()));
  Assert(a.CopyRange(1,3).Equals([2,3,4]));
  Assert(a.Contains(a.Random()));
  Assert(a.Slice(0,5,2).Equals([1,3,5]));
  Assert(a.Mode = 1);
  Assert(a.Min = 1);
  Assert(a.Max = 5);
  Assert(a.Sum = 15);
  Assert(Abs(a.Mean - 3) < 0.001);
  Assert(Abs(a.Median - 3) < 0.001);
  Assert(Abs(a.Stdev - 1.414) < 0.001);
  Assert(Abs(a.Variance - 2) < 0.001);

  Assert(a.Pop = 5);
  Assert(a.Delete(1) = 2);
  Assert(a.Equals([1, 3, 4]));
  a.DeleteRange(1,2);
  Assert(a.Equals([1]));
  a.Remove(1);
  Assert(a.IsEmpty);

  a.SetLength(10);
  Assert(not a.IsEmpty);
  a.Clear();
  Assert(a.IsEmpty);

  a := [1,2,-1,2,0,20];
  Assert(a.IndexOf(2) = 1);
  Assert(a.IndicesOf(2).Equals([1,3]));

  Assert(a.Sorted().Equals([-1,0,1,2,2,20]));
  a.Sort();
  Assert(a.Equals([-1,0,1,2,2,20]));

  Assert(a.Reversed().Equals([20,2,2,1,0,-1]));
  a.Reverse();
  Assert(a.Equals([20,2,2,1,0,-1]));
  Assert(a.Unique().Equals([20, 2, 1, 0, -1]));

  a := [2,4,12];
  a.Insert(3,1);
  a.Insert(TIntegerArray([5,6,7,8,9,10,11]),3);
  Assert(a.Equals([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));
end;