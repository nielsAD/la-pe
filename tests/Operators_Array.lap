{$assertions on}

function ArraySum(Arr: array of Int32): Int32;
var
  i: Int32;
begin
  Result := 0;
  for i := Low(Arr) to High(Arr) do
    Result := Result + Arr[i];
end;

type
  TIntegerArray = array of Int32;
  T2DIntegerArray = array of array of Int32;

var
  a: array of Int32;
  b: array[0..9] of Int32;
  c: T2DIntegerArray;
begin
  Assert(Length(a) = 0, 'Length');

  a := [];
  Assert(Length(a) = 0, 'Assign []');

  SetLength(a, 10);
  Assert(Length(a) = 10,    'Length');
  Assert(High(a) = High(b), 'High');
  Assert(Low(a) = Low(b),   'Low');

  Assert(ArraySum(a) = 0, 'Sum(a) > 0');
  Assert(ArraySum(b) = 0, 'Sum(b) > 0');

  a[1] := 1;
  a[3] := 3;
  a[5] := 5;
  Assert(a[3] = 3,        'a[3] <> 3');
  Assert(a[a[3]] = 3,     'a[a[3]] <> 3');
  Assert(ArraySum(a) = 9, 'Sum(a) <> 9');

  a := [0, 1, 0, 3, 0, 5, 0, 0, 0, 0];
  Assert(Length(a) = 10,  'Assign a');
  Assert(a[3] = 3,        'Assign a[3] <> 3');
  Assert(a[a[3]] = 3,     'Assign a[a[3]] <> 3');
  Assert(ArraySum(a) = 9, 'Assign Sum(a) <> 9');

  b[1] := 2;
  b[3] := 2;
  b[5] := 2;
  Assert(b[a[3]] = 2,     'b[3] <> 2');
  Assert(ArraySum(b) = 6, 'Sum(a) <> 6');

  b := [0, 2, 0, 2, 0, 2, 0, 0, 0, 0];
  Assert(Length(b) = 10,  'Assign b');
  Assert(b[a[3]] = 2,     'Assign b[3] <> 2');
  Assert(ArraySum(b) = 6, 'Assign Sum(a) <> 6');

  a := a + 6;
  Assert(Length(a) = 11,   'Length +1');
  Assert(ArraySum(a) = 15, 'Sum(a) <> 15');

  a := b;
  Assert(ArraySum(a) = 6, 'Sum(a) <> 6');

  a := [1, 2, 3];
  Assert(a = TIntegerArray([1, 2, 3]), 'a = [1, 2, 3]');
  Assert(a <> TIntegerArray([4, 5, 6]), 'a <> [4, 5, 6]');

  b := [0..9];
  Assert(b = [0..9], 'b = [0..9]');

  c := [[1, 2], [4, 5]];
  Assert(c = T2DIntegerArray([[1, 2], [4, 5]]), 'c = [[1, 2], [4, 5]]');
  Assert(c <> T2DIntegerArray([[4, 5], [1, 2]]), 'c <> [[4, 5], [1, 2]]');
end;
