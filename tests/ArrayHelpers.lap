{$assertions on}

procedure TestSort;
var
  Arr: TIntegerArray = [1,2,3,4,5];
begin
  Arr.Sort(TIntegerArray([5,4,3,2,1]), True);
  Assert(ToString(Arr) = '[5, 4, 3, 2, 1]');

  Arr.Sort(TDoubleArray([0.1, 0.2, 0.3, 0.4, 0.5]), False);
  Assert(ToString(Arr) = '[1, 2, 3, 4, 5]');

  Arr.Sort(TSingleArray([0.1, 0.2, 0.3, 0.4, 0.5]), False);
  Assert(ToString(Arr) = '[5, 4, 3, 2, 1]');

  Arr.Sort([High(Int64),High(Int64)-1,High(Int64)-2,High(Int64)-3,High(Int64)-4], True);
  Assert(ToString(Arr) = '[1, 2, 3, 4, 5]');

  Arr += [-10000,10000];
  Arr.Sort();
  Assert(ToString(Arr) = '[-10000, 1, 2, 3, 4, 5, 10000]');
end;
 
procedure TestSorted;
var
  Arr: TIntegerArray = [1,2,3,4,5];
begin
  Assert(
    ToString(Arr.Sorted(TIntegerArray([5,4,3,2,1]), True)) =
    ToString(Arr.Sorted(TDoubleArray([0.1,0.2,0.3,0.4,0.5]), False))
  );
  // ensure untouched
  Assert(ToString(Arr) = '[1, 2, 3, 4, 5]');

  Assert(ToString(Arr.Sorted([High(Int64),High(Int64)-1,High(Int64)-2,High(Int64)-3,High(Int64)-4], True)) = '[5, 4, 3, 2, 1]');
  Assert(ToString(Arr.Sorted()) = '[1, 2, 3, 4, 5]');
end;

procedure TestCopy;
var
  Arr: TIntegerArray = [1..8];
begin
  Assert(ToString(Arr.Copy()) = '[1, 2, 3, 4, 5, 6, 7, 8]');
  Assert(ToString(Arr.CopyRange(2,4)) = '[3, 4, 5]');
end;

procedure TestDelete;
var
  Arr: TIntegerArray = [1..8];
begin
  Assert(Arr.Delete(0) = 1);
  Assert(Arr.Delete(6) = 8);
  Arr.DeleteRange(1,4);
  Assert(ToString(Arr) = '[2, 7]');
end;

procedure TestRemove;
var
  Arr: TIntegerArray = [1..4];
begin
  Assert(Arr.Remove(1) = 1);
  Assert(Arr.Remove(4) = 4);
  Assert(Arr.Remove(123) = 0);   
  Assert(ToString(Arr) = '[2, 3]');
end;

procedure TestPop;
var
  Arr: TIntegerArray = [1,2,3,4,5,6];
begin
  Assert(Arr.Pop = 6);
  Assert(Arr.Pop = 5);
  Assert(Arr.Length = 4);
end;

procedure TestOverrideOverload;
var
  a: TIntegerArray;
begin
  Assert(a.Random() = 123);
  Assert(a.IndexOf(0,0,0) = 999);
end;

function TIntegerArray.IndexOf(a,b,c: Integer): Integer; overload;
begin
  Result := 999;
end;

function TIntegerArray.Random: Int32; override;
begin
  Result := 123;
end; 

procedure TestAlgo;
var
  a: TIntegerArray = [1,1,1,2,2,2];
begin
  Assert(ToString(a.Variance) = '0,25');
  Assert(ToString(a.Stdev) = '0,5');
  Assert(ToString(a.Min) = '1');
  Assert(ToString(a.Max) = '2');
  Assert(ToString(a.Mean) = '1,5');
  Assert(ToString(a.Median) = '1,5');
end;

var
  Arr: TIntegerArray = [3,2,1];
begin
  Arr.SetLength(10);

  Assert(Arr.Length = 10);
  Assert(Arr.First = 3);
  Assert(Arr.Last = 0);
  Assert(Arr.Reversed().Last = 3);
  Assert(Arr.IndexOf(3) = 0);
  Assert(Arr.IndexOf(2) = 1);
  Assert(Arr.IndexOf(1) = 2);

  Assert(not Arr.Empty);
  Arr := [];
  Assert(Arr.Empty);
  SetLength(Arr, 0);
  Assert(Arr.Empty);

  TestSort();
  TestSorted();
  TestCopy();
  TestDelete();
  TestRemove();
  TestPop();
  TestAlgo();
  TestOverrideOverload();
end;